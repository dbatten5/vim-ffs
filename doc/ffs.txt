*ffs.txt*  Web searching based on the current filetype                     v1.0
*FFS*

==============================================================================
CONTENTS                                                   *FFSContents*

    1. Intro ........................................ |FFSIntro|
    2. Commands .................................. |FFSCommands|
      2.1 |:FFS|
    3. Configuration ....................... |FFSConfiguration|
      3.1 |g:ffs_schema|
      3.2 |g:ffs_engine|
      3.3 |b:ffs_scope|
    4. Mappings ................................. |FFSMappings|

==============================================================================
OVERVIEW                                                             *FFSIntro*

This plugin provides a way to quickly search the web for a topic from vim,
scoping the query to the current filetype, working on the assumption that
scoped searches provide more relevant results than unscoped searches.

==============================================================================
COMMANDS                                                          *FFSCommands*

------------------------------------------------------------------------------
2.1 :FFS[!] {query}                                                      *:FFS*

Perform a search for {query} with the current filetype or custom schema
mappping scope for the query. If no query is provided, the current word
under the cursor will be used as the query.

With [!], `FFS` will ignore any |b:ffs_scope| variables and the default scope
for the current filetype will be used.

==============================================================================
CONFIGURATION                                                *FFSConfiguration*

------------------------------------------------------------------------------
3.1 g:ffs_schema                                                 *g:ffs_schema*

This plugin comes with some sensible defaults for scoped searches, eg.
calling `:FFS` from a `.vim` file will use `'vimscript'` as the scope. To add
your own custom mappings on top of the defaults, set this configuration
variable to a dictionary of `'filetype'`, `'scope'` key value pairs, for
example: >

    let g:ffs_schema = {
      \ 'eruby': 'erb',
    \ }

------------------------------------------------------------------------------
3.2 g:ffs_engine                                                 *g:ffs_engine*

This plugin uses Google as the default search engine. If you prefer to use a
different engine, set this variable to the url of the desired search result
page. Just make sure to include two `%s` placeholders, the first will be the
scope and second will be the query. For example, to use Ask Jeeves as your
engine: >

    let g:ffs_engine = 'https://ask.com/web?q=%s+%s'

------------------------------------------------------------------------------
3.3 b:ffs_scope                                                   *b:ffs_scope*

To override the default or custom schema for the current buffer, set a
`b:ffs_scope` variable to the desired search scope. This can be useful for
filetypes that are used for specific technologies where searches are more
typically related to the technology, not the filetype, for example `yaml`
files used for `kubernetes` schemas and `js` files used for `react`
components. To ensure that all `yaml` files that include the word
`'apiVersion'` use `'kubernetes'` as the search scope rather than `'yaml'`,
add the following to a `'ftplugin/yaml.vim'` file: >

    augroup ffs_yaml | au!
      autocmd BufEnter *
        \ if search('apiVersion', 'nw')
          \ | let b:ffs_scope = 'kubernetes'
        \ | endif
    augroup end

==============================================================================
MAPPINGS                                                          *FFSMappings*

Global

This plugin comes with no mappings out of the box, but feel free to add one
like so: >

    nnoremap <c-s> :FFS<space>

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
